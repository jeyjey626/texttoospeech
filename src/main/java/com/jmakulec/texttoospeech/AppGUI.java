package com.jmakulec.texttoospeech;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class AppGUI {
    // declarations
    private String fileToPlayPath;
    private JFrame frame;
    public AudioFilePlayer playingThread;
    // ------ components generated by AppGuiForm
    private JPanel rootPanel;
    private JPanel entryPanel;
    private JPanel OptionsPanel;
    private JRadioButton fileSelect;
    private JRadioButton textEntry;
    private JCheckBox analysis;
    private JPanel entryValuePanel;
    private JPanel fileInputPanel;
    private JPanel textInputPanel;
    private JTextArea inputTextArea;
    private JTextField fileInputField;
    private JButton fileChooserButton;
    private JPanel navigationPanel;
    private JButton playButton;
    private JButton stopButton;
    private JButton cleanButton;
    private JMenu optionsMenu;
    private JMenuItem libraryButton;

    public AppGUI() {
        playingThread = new AudioFilePlayer();
        // SoundLibraryContent.inputLibrary("E:\\Dokumenty\\PracaInz\\soundfiles\\"); // - library added in code
        frame = new JFrame("Syntezer mowy");
        frame.setContentPane(rootPanel); //setting the panel from GUIform in the frame
        frame.pack();
        frame.setMinimumSize(new Dimension(450, 600));
        frame.setLocationRelativeTo(null); // centering the frame
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);

        if (!SoundLibraryContent.isInitLibrary()) {
            while (SoundLibraryContent.isFileMapEmpty()) {
                setLibrary();
                if (SoundLibraryContent.getLibraryPath() == null) {
                    JOptionPane.showMessageDialog(frame,
                            "Należy wybrać ścieżkę biblioteki z dźwiękami",
                            "Błąd",
                            JOptionPane.WARNING_MESSAGE);
                }
                else if (SoundLibraryContent.isFileMapEmpty()) {
                    JOptionPane.showMessageDialog(frame,
                            "Zły folder. W folderze z biblioteką dźwięków powinny znajdować się pliki z rozszerzeniem .wav",
                            "Błąd",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (fileSelect.isSelected()) {
                    playSound(PDFReader.readText(new File(fileToPlayPath)));
                }
                else if (inputTextArea.getText().length() != 0) {
                    playSound(SentenceSlicer.sliceText(inputTextArea.getText()));
                }
            }
        });
        cleanButton.addActionListener(e -> inputTextArea.setText(""));
        stopButton.addActionListener(e -> {
           if (playingThread.isAlive()) playingThread.cancelPlaying();
        });
        libraryButton.addActionListener(e -> {
            setLibrary();
        });
        fileChooserButton.addActionListener(e -> {
            fileSelect.setSelected(true);
            JFileChooser fileChooser = new JFileChooser(); // creating a file chooser
            fileChooser.setDialogTitle("Wybierz plik do odtworzenia");
            FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Pliki tekstowe i PDF", "txt", "text", "pdf"); // creating filter allowing only pdf and txt
            fileChooser.setFileFilter(extensionFilter);


            int state = fileChooser.showOpenDialog(frame);

            if (state == JFileChooser.APPROVE_OPTION) {
                fileToPlayPath = fileChooser.getSelectedFile().getAbsolutePath();
                fileInputField.setText(fileChooser.getSelectedFile().getAbsolutePath());
            }
        });
        textEntry.addActionListener(e -> {
            fileInputField.setEditable(false);
            inputTextArea.setEditable(true);
        });
        fileSelect.addActionListener(e -> {
            fileInputField.setEditable(true);
            inputTextArea.setEditable(false);
        });
        inputTextArea.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                fileInputField.setEditable(false);
                inputTextArea.setEditable(true);
            }
        });
    }

    public static void main(String[] args) {
        new AppGUI();
    }
    
    private void playSound(ArrayList<String> input) {
        ArrayList<AudioInputStream> wordFileList = new ArrayList<>();
        for (String s: input){
            try {
                wordFileList.add(AudioAppender.appendFiles(WordSlicer.sliceText(s)));
                //AudioFilePlayer.playFile(AudioAppender.appendFiles(WordSlicer.sliceText(s)));
            } catch (IOException | UnsupportedAudioFileException exception) {
                exception.printStackTrace();
            }
        }
        try {
            AudioFilePlayer.setPlayableInput( AudioAppender.appendWords(wordFileList) );
            if (playingThread.isAlive()) playingThread.cancelPlaying();
            playingThread = new AudioFilePlayer();
            playingThread.start();
        } catch (IOException | UnsupportedAudioFileException exception) {
            exception.printStackTrace();
        }
    }

    private void setLibrary() {
        JFileChooser libraryChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        libraryChooser.setDialogTitle("Wybierz ścieżkę biblioteki dźwięków");
        libraryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = libraryChooser.showDialog(frame, "Wybierz");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            SoundLibraryContent.inputLibrary(libraryChooser.getSelectedFile().getAbsolutePath() + "\\");
            SoundLibraryContent.saveLibraryPath(libraryChooser.getSelectedFile().getAbsolutePath() + "\\");
        }
    }
}
