package com.jmakulec.texttoospeech;


import Utils.OtherUtils;
import Utils.TextProcessing;
import org.pushingpixels.substance.api.SubstanceCortex;
import org.pushingpixels.substance.api.skin.*;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class AppGUI {
    private String fileToPlayPath;
    private final JFrame frame;
    public AudioFilePlayer playingThread;
    private long startTime;
    // ------ components generated by AppGuiForm
    private JPanel rootPanel;
    private JPanel entryPanel;
    private JPanel OptionsPanel;
    private JRadioButton fileSelect;
    private JRadioButton textEntry;
    private JCheckBox analysis;
    private JPanel entryValuePanel;
    private JPanel fileInputPanel;
    private JPanel textInputPanel;
    private JTextArea inputTextArea;
    private JTextField fileInputField;
    private JButton fileChooserButton;
    private JPanel navigationPanel;
    private JButton playButton;
    private JButton stopButton;
    private JButton cleanButton;
    private JMenu optionsMenu;
    private JMenuItem libraryButton;
    private JPanel radioPanel;
    private JMenuItem aboutButton;

    public AppGUI() {
        //init the Thread for sound
        playingThread = new AudioFilePlayer();

        //app frame init
        frame = new JFrame("Syntezer mowy");
        frame.setContentPane(rootPanel); //setting the panel from GUIform in the frame
        frame.setMinimumSize(new Dimension(500, 650));
        frame.setLocationRelativeTo(null); // centering the frame
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        //setting a look and feel
        SubstanceCortex.GlobalScope.setSkin(new CremeCoffeeSkin());
        SwingUtilities.updateComponentTreeUI(frame);

        //setting initial option -> text input
        textEntry.setSelected(true);

        frame.pack();
        frame.setVisible(true);

        //checking if there was library saved in json, if not -> popup window to choose library source
        if (!SoundLibraryContent.isInitLibrary()) {
            setLibrary();
            while (SoundLibraryContent.isFileMapEmpty()) {
                setLibrary();
                if (SoundLibraryContent.getLibraryPath() == null) {
                    JOptionPane.showMessageDialog(frame,
                            "Należy wybrać ścieżkę biblioteki z dźwiękami",
                            "Błąd",
                            JOptionPane.WARNING_MESSAGE);
                }
                else if (SoundLibraryContent.isFileMapEmpty()) {
                    JOptionPane.showMessageDialog(frame,
                            "Zły folder. W folderze z biblioteką dźwięków powinny znajdować się pliki z rozszerzeniem .wav",
                            "Błąd",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        //---------------------------------------play sound button listener---------------------------------------
        playButton.addActionListener(e -> {
            startTime = System.nanoTime();
            if (fileSelect.isSelected()) {
                File file = new File(fileToPlayPath);
                if (file.getName().contains(".txt") || file.getName().contains(".text")) {
                    inputTextArea.setText(Utils.TextProcessing.txtFileReader(file));
                    playSound(Utils.TextProcessing.txtFileProcessor(file));
                }
                else if(file.getName().contains(".pdf")) {
                    inputTextArea.setText(TextProcessing.processPDF(file));
                    playSound(Utils.TextProcessing.pdfProcessor(file));
                }
                else JOptionPane.showMessageDialog(frame,
                            "Zły format pliku. \nDozwolone są jedynie pliki .txt i .pdf",
                            "Błąd",
                            JOptionPane.ERROR_MESSAGE);
            }
            else if (inputTextArea.getText().length() != 0) {
                playSound(Utils.TextProcessing.sliceText(inputTextArea.getText()));
            }
        });

        //---------------------------------------clean all button listener---------------------------------------
        cleanButton.addActionListener(e -> {
            inputTextArea.setText("");
            fileToPlayPath = "";
            fileInputField.setText("");
        });

        //---------------------------------------stop sound button listener---------------------------------------
        stopButton.addActionListener(e -> {
           if (playingThread.isAlive()) playingThread.cancelPlaying();
        });

        //---------------------------------------set library manu button listener---------------------------------------
        libraryButton.addActionListener(e -> setLibrary());
        fileChooserButton.addActionListener(e -> {
            fileSelect.setSelected(true);
            JFileChooser fileChooser = new JFileChooser(); // creating a file chooser
            fileChooser.setDialogTitle("Wybierz plik do odtworzenia");
            FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Pliki tekstowe i PDF", "txt", "text", "pdf"); // creating filter allowing only pdf and txt
            fileChooser.setFileFilter(extensionFilter);

            int state = fileChooser.showOpenDialog(frame);

            if (state == JFileChooser.APPROVE_OPTION) {
                fileToPlayPath = fileChooser.getSelectedFile().getAbsolutePath();
                fileInputField.setText(fileChooser.getSelectedFile().getAbsolutePath());
            }
        });

        //--------------------------------------file/text input listeners with blocking other inputs-------------------------
        textEntry.addActionListener(e -> {
            fileInputField.setEditable(false);
            inputTextArea.setEditable(true);
        });
        fileSelect.addActionListener(e -> {
            fileInputField.setEditable(true);
            inputTextArea.setEditable(false);
        });
        inputTextArea.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                textEntry.setSelected(true);
                fileInputField.setEditable(false);
                inputTextArea.setEditable(true);
            }
        });

        //---------------------------------------about app menu button listener---------------------------------------
        aboutButton.addActionListener(e -> JOptionPane.showMessageDialog(frame,
                OtherUtils.aboutAppTxt));
    }

    public static void main(String[] args) {
        // invoking as runnable (swing)
        Runnable runnable = AppGUI::new;
        SwingUtilities.invokeLater(runnable);
    }

    //--------------------------------------------------------------------------------------------------------
    //-------------------------------------------playing sound function---------------------------------------
    //--------------------------------------------------------------------------------------------------------
    private void playSound(ArrayList<String> input) {
        // declarations for total analysis counts

        double totalCorruptedLetterCount = 0;
        int totalPolishSymbolsCount = 0;
        ArrayList<AudioInputStream> wordFileList = new ArrayList<>();
        for (String s: input){
            //iterating on every string/word from input list, slicing it into filenames and saving into wordFileList
            try {
                wordFileList.add(AudioAppender.appendWordFragments(WordSlicer.sliceText(s, analysis.isSelected())));
                if (analysis.isSelected()) { //updating analytic variables
                    totalCorruptedLetterCount += WordSlicer.corruptedCount;
                    totalPolishSymbolsCount += WordSlicer.polishSymbolsCount;
                }
                //AudioFilePlayer.playFile(AudioAppender.appendWordFragments(WordSlicer.sliceText(s)));
            } catch (IOException | UnsupportedAudioFileException exception) { exception.printStackTrace(); }
        }

        try {
            //setting input by appending all the sounds from fileWordList
            AudioFilePlayer.setPlayableInput( AudioAppender.appendWords(wordFileList) );
            long endTme = System.nanoTime();
            long timeElapsed = endTme - startTime;
            System.out.println("Execution time in ms: " + timeElapsed/1000000);
            //canceling/stopping playing if the sound thread is still playing previous sound
            if (playingThread.isAlive()) playingThread.cancelPlaying();
            //creating new instance of playing thread and running it
            playingThread = new AudioFilePlayer();
            playingThread.start();
        } catch (IOException | UnsupportedAudioFileException exception) { exception.printStackTrace(); }
        if (analysis.isSelected()) { //popup message window with library coverage if analysis checkbox was selected
            double totalLetterCount = input.stream().mapToInt(String::length).sum();
            double coveragePercent = totalCorruptedLetterCount !=0 ? 100.00 - totalCorruptedLetterCount /(totalLetterCount - totalPolishSymbolsCount) * 100 : 100;
            coveragePercent = Utils.OtherUtils.round(coveragePercent, 2);
            JOptionPane.showMessageDialog(frame,
                    "Biblioteka dźwięków pokrywa około " + coveragePercent + "% odtwarzanego tekstu");
        }

    }

    //--------------------------------------------------------------------------------------------------------
    //-------------------------------------------set Library file chooser---------------------------------------
    //--------------------------------------------------------------------------------------------------------
    private void setLibrary() {
        JFileChooser libraryChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        libraryChooser.setDialogTitle("Wybierz ścieżkę biblioteki dźwięków");
        libraryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); //only directories

        int returnVal = libraryChooser.showDialog(frame, "Wybierz");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //processing input directory -> getting a file map and saving library path to json
            SoundLibraryContent.inputLibrary(libraryChooser.getSelectedFile().getAbsolutePath() + "\\");
            SoundLibraryContent.saveLibraryPath(libraryChooser.getSelectedFile().getAbsolutePath() + "\\");
        }
    }
}
